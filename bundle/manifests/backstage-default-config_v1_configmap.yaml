apiVersion: v1
data:
  backend-auth-configmap.yaml: |
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: # placeholder for '<cr-name>-backend-auth'
    data:
      "app-config.backend-auth.default.yaml": |
        backend:
          auth:
            keys:
              # This is a default value, which you should change by providing your own app-config
              - secret: "pl4s3Ch4ng3M3"
  db-secret.yaml: |
    apiVersion: v1
    kind: Secret
    metadata:
      name: # placeholder for 'backstage-psql-secret-<cr-name>'
    stringData:
      "POSTGRES_PASSWORD": "rl4s3Fh4ng3M4" # default value, change to your own value
      "POSTGRES_PORT": "5432"
      "POSTGRES_USER": "postgres"
      "POSTGRESQL_ADMIN_PASSWORD": "rl4s3Fh4ng3M4" # default value, change to your own value
      "POSTGRES_HOST": "" # set to your Postgres DB host. If the local DB is deployed, set to 'backstage-psql-<cr-name>'
  db-service-hl.yaml: |
    apiVersion: v1
    kind: Service
    metadata:
      name: backstage-psql-cr1-hl # placeholder for 'backstage-psql-<cr-name>-hl'
    spec:
      selector:
        janus-idp.io/app:  backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
      clusterIP: None
      ports:
        - port: 5432
  db-service.yaml: |
    apiVersion: v1
    kind: Service
    metadata:
      name: backstage-psql # placeholder for 'backstage-psql-<cr-name>' .NOTE: For the time it is static and linked to Secret-> postgres-secrets -> OSTGRES_HOST
    spec:
      selector:
        janus-idp.io/app:  backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
      ports:
        - port: 5432
  db-statefulset.yaml: |
    apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
    spec:
      podManagementPolicy: OrderedReady
      replicas: 1
      selector:
        matchLabels:
          janus-idp.io/app: backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
      serviceName: backstage-psql-cr1-hl # placeholder for 'backstage-psql-<cr-name>-hl'
      template:
        metadata:
          labels:
            janus-idp.io/app: backstage-psql-cr1 # placeholder for 'backstage-psql-<cr-name>'
          name: backstage-db-cr1 # placeholder for 'backstage-psql-<cr-name>'
        spec:
          persistentVolumeClaimRetentionPolicy:
            whenDeleted: Retain
            whenScaled: Retain
          containers:
            - env:
                - name: POSTGRESQL_PORT_NUMBER
                  value: "5432"
                - name: POSTGRESQL_VOLUME_DIR
                  value: /var/lib/pgsql/data
                - name: PGDATA
                  value: /var/lib/pgsql/data/userdata
              envFrom:
                - secretRef:
                    name: <POSTGRESQL_SECRET>  # will be replaced with 'backstage-psql-secrets-<cr-name>'
              image: <RELATED_IMAGE_postgresql> # will be replaced with the actual image
              imagePullPolicy: IfNotPresent
              securityContext:
                runAsNonRoot: true
                allowPrivilegeEscalation: false
                seccompProfile:
                  type: RuntimeDefault
                capabilities:
                  drop:
                    - ALL
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
                failureThreshold: 6
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              name: postgresql
              ports:
                - containerPort: 5432
                  name: tcp-postgresql
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - -c
                    - -e
                    - |
                      exec pg_isready -U ${POSTGRES_USER} -h 127.0.0.1 -p 5432
                failureThreshold: 6
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 5
              resources:
                requests:
                  cpu: 250m
                  memory: 256Mi
                limits:
                  memory: 1024Mi
              volumeMounts:
                - mountPath: /dev/shm
                  name: dshm
                - mountPath: /var/lib/pgsql/data
                  name: data
          restartPolicy: Always
          securityContext: {}
          serviceAccount: default
          serviceAccountName: default
          volumes:
            - emptyDir:
                medium: Memory
              name: dshm
      updateStrategy:
        rollingUpdate:
          partition: 0
        type: RollingUpdate
      volumeClaimTemplates:
        - apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: data
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 1Gi
  deployment.yaml: |-
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name:  # placeholder for 'backstage-<cr-name>'
    spec:
      replicas: 1
      selector:
        matchLabels:
          janus-idp.io/app:  # placeholder for 'backstage-<cr-name>'
      template:
        metadata:
          labels:
            janus-idp.io/app:  # placeholder for 'backstage-<cr-name>'
        spec:
          #      serviceAccountName: default
          volumes:
            - ephemeral:
                volumeClaimTemplate:
                  spec:
                    accessModes:
                      - ReadWriteOnce
                    resources:
                      requests:
                        storage: 1Gi
              name: dynamic-plugins-root
            - name: dynamic-plugins-npmrc
              secret:
                defaultMode: 420
                optional: true
                secretName: dynamic-plugins-npmrc

          initContainers:
            - command:
                - ./install-dynamic-plugins.sh
                - /dynamic-plugins-root
              env:
                - name: NPM_CONFIG_USERCONFIG
                  value: /opt/app-root/src/.npmrc.dynamic-plugins
              image: <RELATED_IMAGE_backstage> # will be replaced with the actual image quay.io/janus-idp/backstage-showcase:next
              imagePullPolicy: IfNotPresent
              name: install-dynamic-plugins
              volumeMounts:
                - mountPath: /dynamic-plugins-root
                  name: dynamic-plugins-root
                - mountPath: /opt/app-root/src/.npmrc.dynamic-plugins
                  name: dynamic-plugins-npmrc
                  readOnly: true
                  subPath: .npmrc
              workingDir: /opt/app-root/src

          containers:
            - name: backstage-backend
              image: <RELATED_IMAGE_backstage> # will be replaced with the actual image quay.io/janus-idp/backstage-showcase:next
              imagePullPolicy: IfNotPresent
              args:
                - "--config"
                - "dynamic-plugins-root/app-config.dynamic-plugins.yaml"
              readinessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthcheck
                  port: 7007
                  scheme: HTTP
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 2
                timeoutSeconds: 2
              livenessProbe:
                failureThreshold: 3
                httpGet:
                  path: /healthcheck
                  port: 7007
                  scheme: HTTP
                initialDelaySeconds: 60
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 2
              ports:
                - name: backend
                  containerPort: 7007
              env:
                - name: APP_CONFIG_backend_listen_port
                  value: "7007"
              envFrom:
                - secretRef:
                    name: <POSTGRESQL_SECRET>  # will be replaced with 'backstage-psql-secrets-<cr-name>'
              #            - secretRef:
              #                name: backstage-secrets
              volumeMounts:
                - mountPath: /opt/app-root/src/dynamic-plugins-root
                  name: dynamic-plugins-root
  dynamic-plugins-configmap.yaml: |-
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: # placeholder for '<cr-name>-dynamic-plugins'
    data:
      "dynamic-plugins.yaml": |
        includes:
          - dynamic-plugins.default.yaml
        plugins: []
  route.yaml: |-
    apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name:  # placeholder for 'backstage-<cr-name>'
    spec:
      port:
        targetPort: http-backend
      path: /
      tls:
        insecureEdgeTerminationPolicy: Redirect
        termination: edge
      to:
        kind: Service
        name:  # placeholder for 'backstage-<cr-name>'
  service.yaml: |-
    apiVersion: v1
    kind: Service
    metadata:
      name:  # placeholder for 'backstage-<cr-name>'
    spec:
      type: ClusterIP
      selector:
        janus-idp.io/app:  # placeholder for 'backstage-<cr-name>'
      ports:
        - name: http-backend
          port: 80
          targetPort: backend
kind: ConfigMap
metadata:
  name: backstage-default-config
